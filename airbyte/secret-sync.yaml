# Secret replication using Kubernetes Job with proper RBAC
# This approach securely copies the secret without exposing credentials in GitOps

apiVersion: v1
kind: ServiceAccount
metadata:
  name: secret-replicator
  namespace: airbyte
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-weight: "-20"
    argocd.argoproj.io/sync-wave: "-2"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: secret-replicator
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-weight: "-20"
    argocd.argoproj.io/sync-wave: "-2"
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["update", "patch"]
  resourceNames: ["airbyte-airbyte-secrets", "airbyte-auth-secrets"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: secret-replicator
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-weight: "-20"
    argocd.argoproj.io/sync-wave: "-2"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: secret-replicator
subjects:
- kind: ServiceAccount
  name: secret-replicator
  namespace: airbyte
---
apiVersion: batch/v1
kind: Job
metadata:
  name: postgres-secret-replicator
  namespace: airbyte
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-weight: "-10"
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    argocd.argoproj.io/sync-wave: "-1"
spec:
  template:
    spec:
      serviceAccountName: secret-replicator
      restartPolicy: OnFailure
      containers:
      - name: secret-replicator
        image: bitnami/kubectl:latest
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "Creating Airbyte-compatible secret from PostgreSQL credentials..."
          
          # Check if source secret exists
          if ! kubectl get secret airbyte.airbyte.credentials.postgresql.acid.zalan.do -n postgres-operator-deployment >/dev/null 2>&1; then
            echo "Source secret not found in postgres-operator-deployment namespace"
            exit 1
          fi
          
          # Get the password from the source secret
          PASSWORD=$(kubectl get secret airbyte.airbyte.credentials.postgresql.acid.zalan.do -n postgres-operator-deployment -o jsonpath='{.data.password}')
          USERNAME=$(kubectl get secret airbyte.airbyte.credentials.postgresql.acid.zalan.do -n postgres-operator-deployment -o jsonpath='{.data.username}')
          
          # Update the existing Airbyte secret (managed by ArgoCD) with the correct values
          kubectl patch secret airbyte-airbyte-secrets -n airbyte --type='json' -p='[
            {"op":"replace","path":"/data/DATABASE_PASSWORD","value":"'"$PASSWORD"'"},
            {"op":"replace","path":"/data/DATABASE_USER","value":"'"$USERNAME"'"}
          ]'
          
          # Check if airbyte-auth-secrets exists and update it with missing keys for Airbyte 1.6
          if kubectl get secret airbyte-auth-secrets -n airbyte >/dev/null 2>&1; then
            echo "Updating airbyte-auth-secrets with missing dataplane client credentials..."
            
            # Check if dataplane-client-id key exists
            if ! kubectl get secret airbyte-auth-secrets -n airbyte -o jsonpath='{.data.dataplane-client-id}' >/dev/null 2>&1 || [ -z "$(kubectl get secret airbyte-auth-secrets -n airbyte -o jsonpath='{.data.dataplane-client-id}')" ]; then
              # Generate a random dataplane client ID if it doesn't exist
              DATAPLANE_CLIENT_ID=$(openssl rand -hex 16)
              kubectl patch secret airbyte-auth-secrets -n airbyte --type='json' -p='[{"op":"add","path":"/data/dataplane-client-id","value":"'$(echo -n "$DATAPLANE_CLIENT_ID" | base64 -w 0)'"}]'
              echo "Added dataplane-client-id to airbyte-auth-secrets"
            fi
            
            # Check if dataplane-client-secret key exists
            if ! kubectl get secret airbyte-auth-secrets -n airbyte -o jsonpath='{.data.dataplane-client-secret}' >/dev/null 2>&1 || [ -z "$(kubectl get secret airbyte-auth-secrets -n airbyte -o jsonpath='{.data.dataplane-client-secret}')" ]; then
              # Generate a random dataplane client secret if it doesn't exist
              DATAPLANE_CLIENT_SECRET=$(openssl rand -hex 32)
              kubectl patch secret airbyte-auth-secrets -n airbyte --type='json' -p='[{"op":"add","path":"/data/dataplane-client-secret","value":"'$(echo -n "$DATAPLANE_CLIENT_SECRET" | base64 -w 0)'"}]'
              echo "Added dataplane-client-secret to airbyte-auth-secrets"
            fi
          else
            echo "Warning: airbyte-auth-secrets not found, it should be created by the Helm chart"
          fi
          
          echo "Airbyte-compatible secret created successfully"
      activeDeadlineSeconds: 300
  backoffLimit: 3
