# Secret replication using Kubernetes Job with proper RBAC
# This approach securely copies the secret without exposing credentials in GitOps

apiVersion: v1
kind: ServiceAccount
metadata:
  name: secret-replicator
  namespace: airbyte
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-weight: "-20"
    argocd.argoproj.io/sync-wave: "-2"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: secret-replicator
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-weight: "-20"
    argocd.argoproj.io/sync-wave: "-2"
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "update", "patch"]
  resourceNames: ["airbyte-airbyte-secrets"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: secret-replicator
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-weight: "-20"
    argocd.argoproj.io/sync-wave: "-2"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: secret-replicator
subjects:
- kind: ServiceAccount
  name: secret-replicator
  namespace: airbyte
---
apiVersion: batch/v1
kind: Job
metadata:
  name: postgres-secret-replicator
  namespace: airbyte
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-weight: "-10"
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    argocd.argoproj.io/sync-wave: "-1"
spec:
  template:
    spec:
      serviceAccountName: secret-replicator
      restartPolicy: OnFailure
      containers:
      - name: secret-replicator
        image: bitnami/kubectl:latest
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "Creating Airbyte-compatible secret from PostgreSQL credentials..."
          
          # Check if source secret exists
          if ! kubectl get secret airbyte.airbyte.credentials.postgresql.acid.zalan.do -n postgres-operator-deployment >/dev/null 2>&1; then
            echo "Source secret not found in postgres-operator-deployment namespace"
            exit 1
          fi
          
          # Get the password from the source secret
          PASSWORD=$(kubectl get secret airbyte.airbyte.credentials.postgresql.acid.zalan.do -n postgres-operator-deployment -o jsonpath='{.data.password}')
          USERNAME=$(kubectl get secret airbyte.airbyte.credentials.postgresql.acid.zalan.do -n postgres-operator-deployment -o jsonpath='{.data.username}')
          
          # Create Airbyte-compatible secret with ArgoCD annotation to prevent pruning
          kubectl create secret generic airbyte-airbyte-secrets -n airbyte \
            --from-literal=DATABASE_PASSWORD="$(echo $PASSWORD | base64 -d)" \
            --from-literal=DATABASE_USER="$(echo $USERNAME | base64 -d)" \
            --dry-run=client -o yaml | \
          kubectl annotate --local -f - argocd.argoproj.io/compare-options=IgnoreExtraneous -o yaml | \
          kubectl apply -f -
          
          echo "Airbyte-compatible secret created successfully"
      activeDeadlineSeconds: 300
  backoffLimit: 3
