# Keycloak realm bootstrap using kcadm CLI
# This Job runs after Keycloak is ready and configures the registry realm

apiVersion: batch/v1
kind: Job
metadata:
  name: keycloak-realm-bootstrap
  namespace: keycloak
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-weight: "10"
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    argocd.argoproj.io/sync-wave: "1"
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: realm-bootstrap
        image: bitnami/keycloak:24.0.5-debian-12-r6
        env:
        - name: KEYCLOAK_ADMIN
          value: admin
        - name: KEYCLOAK_ADMIN_PASSWORD
          value: admin123
        command:
        - /bin/bash
        - -c
        - |
          set -e
          
          KEYCLOAK_URL="http://keycloak.keycloak.svc.cluster.local:8080"
          
          echo "Waiting for Keycloak to be ready..."
          until curl -f $KEYCLOAK_URL/realms/master; do
            sleep 5
          done
          
          echo "Configuring kcadm..."
          /opt/bitnami/keycloak/bin/kcadm.sh config credentials \
            --server $KEYCLOAK_URL \
            --realm master \
            --user $KEYCLOAK_ADMIN \
            --password $KEYCLOAK_ADMIN_PASSWORD
          
          echo "Creating registry realm..."
          /opt/bitnami/keycloak/bin/kcadm.sh create realms \
            -s realm=registry \
            -s enabled=true \
            -s displayName="Docker Registry" \
            -s accessTokenLifespan=900 \
            -s refreshTokenMaxReuse=0 \
            -s offlineSessionMaxLifespan=0 \
            -s duplicateEmailsAllowed=false \
            -s editUsernameAllowed=false \
            -s rememberMe=false \
            -s loginWithEmailAllowed=true || echo "Realm already exists"
          
          echo "Creating docker-registry client..."
          CLIENT_ID=$(/opt/bitnami/keycloak/bin/kcadm.sh create clients -r registry \
            -s clientId=docker-registry \
            -s enabled=true \
            -s protocol=docker-v2 \
            -s publicClient=true \
            -s standardFlowEnabled=true \
            -s directAccessGrantsEnabled=false \
            -s serviceAccountsEnabled=false \
            -i 2>/dev/null || /opt/bitnami/keycloak/bin/kcadm.sh get clients -r registry -q clientId=docker-registry --fields id --format csv --noquotes | tail -n1)
          
          echo "Creating GitHub Actions identity provider..."
          /opt/bitnami/keycloak/bin/kcadm.sh create identity-provider/instances -r registry \
            -s alias=github-actions \
            -s providerId=oidc \
            -s enabled=true \
            -s config.issuer=https://token.actions.githubusercontent.com \
            -s config.authorizationUrl=https://token.actions.githubusercontent.com \
            -s config.tokenUrl=https://token.actions.githubusercontent.com \
            -s config.clientId=zot-actions \
            -s config.validateSignature=true \
            -s config.useJwksUrl=true \
            -s config.jwksUrl=https://token.actions.githubusercontent.com/.well-known/jwks \
            -s config.syncMode=IMPORT || echo "IdP already exists"
          
          echo "Creating mappers for GitHub Actions claims..."
          IDP_ID=$(/opt/bitnami/keycloak/bin/kcadm.sh get identity-provider/instances/github-actions -r registry --fields internalId --format csv --noquotes | tail -n1)
          
          # Repository mapper
          /opt/bitnami/keycloak/bin/kcadm.sh create identity-provider/instances/github-actions/mappers -r registry \
            -s name=repository-mapper \
            -s identityProviderMapper=oidc-user-attribute-idp-mapper \
            -s config.claim=repository \
            -s config.user.attribute=repository || echo "Repository mapper exists"
          
          # Ref mapper  
          /opt/bitnami/keycloak/bin/kcadm.sh create identity-provider/instances/github-actions/mappers -r registry \
            -s name=ref-mapper \
            -s identityProviderMapper=oidc-user-attribute-idp-mapper \
            -s config.claim=ref \
            -s config.user.attribute=ref || echo "Ref mapper exists"
          
          # Actor mapper
          /opt/bitnami/keycloak/bin/kcadm.sh create identity-provider/instances/github-actions/mappers -r registry \
            -s name=actor-mapper \
            -s identityProviderMapper=oidc-user-attribute-idp-mapper \
            -s config.claim=actor \
            -s config.user.attribute=actor || echo "Actor mapper exists"
          
          # SHA mapper
          /opt/bitnami/keycloak/bin/kcadm.sh create identity-provider/instances/github-actions/mappers -r registry \
            -s name=sha-mapper \
            -s identityProviderMapper=oidc-user-attribute-idp-mapper \
            -s config.claim=sha \
            -s config.user.attribute=sha || echo "SHA mapper exists"
          
          echo "Creating GHA token exchanger client..."
          GHA_CLIENT_ID=$(/opt/bitnami/keycloak/bin/kcadm.sh create clients -r registry \
            -s clientId=gha-exchanger \
            -s enabled=true \
            -s protocol=openid-connect \
            -s publicClient=false \
            -s standardFlowEnabled=false \
            -s directAccessGrantsEnabled=true \
            -s serviceAccountsEnabled=false \
            -s attributes.oauth2.device.authorization.grant.enabled=false \
            -s attributes.oidc.ciba.grant.enabled=false \
            -i 2>/dev/null || /opt/bitnami/keycloak/bin/kcadm.sh get clients -r registry -q clientId=gha-exchanger --fields id --format csv --noquotes | tail -n1)
          
          echo "Generating client secret for gha-exchanger..."
          /opt/bitnami/keycloak/bin/kcadm.sh create clients/$GHA_CLIENT_ID/client-secret -r registry
          
          echo "Getting client secret..."
          GHA_CLIENT_SECRET=$(/opt/bitnami/keycloak/bin/kcadm.sh get clients/$GHA_CLIENT_ID/client-secret -r registry --fields value --format csv --noquotes | tail -n1)
          
          echo "Creating Kubernetes secret with GHA client credentials..."
          kubectl create secret generic gha-exchanger-credentials -n keycloak \
            --from-literal=client-id=gha-exchanger \
            --from-literal=client-secret=$GHA_CLIENT_SECRET \
            --dry-run=client -o yaml | kubectl apply -f -
          
          echo "Configuring token exchange permissions..."
          # Get the token-exchange permission policy
          POLICY_ID=$(/opt/bitnami/keycloak/bin/kcadm.sh get clients/$GHA_CLIENT_ID/authz/resource-server/policy -r registry -q name="token-exchange" --fields id --format csv --noquotes 2>/dev/null | tail -n1 || echo "")
          
          if [ -z "$POLICY_ID" ]; then
            # Create token exchange policy if it doesn't exist
            POLICY_ID=$(/opt/bitnami/keycloak/bin/kcadm.sh create clients/$GHA_CLIENT_ID/authz/resource-server/policy/client -r registry \
              -s name=token-exchange \
              -s logic=POSITIVE \
              -s clients=[$GHA_CLIENT_ID] \
              -i)
          fi
          
          echo "Realm configuration completed successfully!"
          echo ""
          echo "=== CONFIGURATION SUMMARY ==="
          echo "Realm: registry"  
          echo "Docker v2 Auth URL: https://keycloak.k.shion1305.com/realms/registry/protocol/docker-v2/auth"
          echo "Service: registry.k.shion1305.com"
          echo "GitHub IdP: github-actions"
          echo "Docker client: docker-registry"
          echo "Token exchanger: gha-exchanger"
          echo "Client secret stored in: gha-exchanger-credentials secret"
          echo "==============================="
      activeDeadlineSeconds: 600
  backoffLimit: 3
