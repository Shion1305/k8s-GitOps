# Secret replication using Kubernetes Job with proper RBAC
# This approach securely copies the secret without exposing credentials in GitOps

apiVersion: v1
kind: ServiceAccount
metadata:
  name: secret-replicator
  namespace: keycloak
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-weight: "-20"
    argocd.argoproj.io/sync-wave: "-2"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: keycloak-secret-replicator
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-weight: "-20"
    argocd.argoproj.io/sync-wave: "-2"
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["update", "patch"]
  resourceNames: ["keycloak-postgres-credentials"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: keycloak-secret-replicator
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-weight: "-20"
    argocd.argoproj.io/sync-wave: "-2"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: keycloak-secret-replicator
subjects:
- kind: ServiceAccount
  name: secret-replicator
  namespace: keycloak
---
apiVersion: batch/v1
kind: Job
metadata:
  name: postgres-secret-replicator
  namespace: keycloak
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-weight: "-10"
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    argocd.argoproj.io/sync-wave: "-1"
spec:
  template:
    spec:
      serviceAccountName: secret-replicator
      restartPolicy: OnFailure
      containers:
      - name: secret-replicator
        image: bitnami/kubectl:latest
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "Creating Keycloak-compatible secret from PostgreSQL credentials..."
          
          # Check if source secret exists
          if ! kubectl get secret postgres.keycloak.credentials.postgresql.acid.zalan.do -n postgres-operator-deployment >/dev/null 2>&1; then
            echo "Source secret not found in postgres-operator-deployment namespace"
            exit 1
          fi
          
          # Get the password and username from the source secret
          PASSWORD=$(kubectl get secret postgres.keycloak.credentials.postgresql.acid.zalan.do -n postgres-operator-deployment -o jsonpath='{.data.password}')
          USERNAME=$(kubectl get secret postgres.keycloak.credentials.postgresql.acid.zalan.do -n postgres-operator-deployment -o jsonpath='{.data.username}')
          
          # Update the existing Keycloak secret (managed by ArgoCD) with the correct values
          kubectl patch secret keycloak-postgres-credentials -n keycloak --type='json' -p='[
            {"op":"replace","path":"/data/postgres-password","value":"'"$PASSWORD"'"},
            {"op":"replace","path":"/data/postgres-username","value":"'"$USERNAME"'"}
          ]'
      activeDeadlineSeconds: 300
  backoffLimit: 10
